---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Route53: Creates a public hosted zone using an reusable_delegation_set for Route53' 

Parameters:
  FunctionName:
    Description: 'Specify the name of the lambda function used.'
    Type: String
    Default: CustomHostedZone
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  Domain:
    Type: String
    Default: "mydomain.tld"
    Description: Domain name
  ReusableDeligationSetID:
    Type: String
    Description: delegetion-set-id used for this hosted zone



Resources:

  Zone:
    Type: 'Custom::Route53HostedZone'
    Version: '1.0'
    Properties:
      DomainName: !Ref Domain
      DelegationSetId: !Ref ReusableDeligationSetID
      ServiceToken: !GetAtt 'CustomHostedZoneFunction.Arn'


  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FunctionName}'
      RetentionInDays: !Ref LogsRetentionInDays

  CustomHostedZoneExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FunctionName}LambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName:   'LambdaPolicy-CustomHostedZoneFunction'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - route53:CreateHostedZone
                - route53:DeleteHostedZone
              Resource: '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CustomHostedZoneFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: !Ref FunctionName
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: '600'
      Role: !GetAtt CustomHostedZoneExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import random
          import string
          import logging
          from botocore.exceptions import ClientError

          route53client = boto3.client('route53')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def create_custom_hosted_zone(DomainName, DelegationSetId):
            result = {}  
            try:
              letters = string.ascii_lowercase
              randomstr = ''.join(random.choice(letters) for i in range(8))
              response = route53client.create_hosted_zone(
                          Name = DomainName,
                          DelegationSetId = DelegationSetId,
                          CallerReference = randomstr
                          )
              logger.info('HostedZone: ' + DomainName + ' created')
              DictHostedZone= response['HostedZone']
              result['HostedZoneId'] =  DictHostedZone['Id']
              result['status'] = True
              return(result)
            except Exception as e:
              logger.error('Creating HostedZone: ' + DomainName + ' failed. Reason: ' + str(e))
              result['HostedZoneId'] =  "none"
              result['Error'] =  "Error: " + str(e)
              result['status'] = False
              return(result)


          def lambda_handler(event, context):
            logger.info('Event: ' + str(event))
            responseData = {}
            PhysicalResourceId = ''
            ResourceProperties = event['ResourceProperties']
            DomainName = ResourceProperties['DomainName']
            DelegationSetId = ResourceProperties['DelegationSetId']

            if event['RequestType'] == 'Create':
              create_hosted_zone = create_custom_hosted_zone(DomainName, DelegationSetId)
              if(create_hosted_zone['status']):
                PhysicalResourceId = create_hosted_zone['HostedZoneId']
                res = True
              else:
                res = False
                responseData['Reason'] = create_hosted_zone['Error']
            elif event['RequestType'] == 'Update':
              create_hosted_zone = create_custom_hosted_zone(DomainName, DelegationSetId)
              if(create_hosted_zone['status']):
                PhysicalResourceId = create_hosted_zone['HostedZoneId']
                res = True
              else:
                res = False
                responseData['Reason'] = create_hosted_zone['Error']
            elif event['RequestType'] == 'Delete':
              PhysicalResourceId = event['PhysicalResourceId']
              try:
                response = route53client.delete_hosted_zone(Id=PhysicalResourceId)
                res = True
                responseData['Reason'] = "CustomHostedZone deleted"
                logger.info('HostedZoneId: ' + PhysicalResourceId + ' deleted')
              except Exception as e:
                res = False
                responseData['Reason'] = "Error: " + str(e)
                logger.error('Deleting HostedZoneId: ' + PhysicalResourceId + ' failed. Reason: ' + str(e))
            else:
              res = False   
              responseData['Reason'] = "Unknown operation: " + event['RequestType']
              logger.error('Unknown operation: ' + event['RequestType'])

            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, PhysicalResourceId)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, PhysicalResourceId)


Outputs:
  ZoneId:
    Description: 'ZoneId'
    Value: !Ref Zone
    Export:
      Name: !Sub '${AWS::StackName}-ZoneId'
