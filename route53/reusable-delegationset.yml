---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Route53: Creates reusable_delegation_set for Route53' 

Parameters:

  FunctionName:
    Description: 'Specify the name of the lambda function used.'
    Type: String
    Default: ReusableDelegationSet
  LogsRetentionInDays:
    Description: 'Specify the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]



Resources:

  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FunctionName}'
      RetentionInDays: !Ref LogsRetentionInDays


  ReusableDelegationSet:
    Type: 'Custom::Route53ReusableDelegationSet'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'ReusableDelegationSetFunction.Arn'
      Region: { Ref: "AWS::Region" }


  ReusableDelegationSetExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FunctionName}LambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaCustomPolicyCheckAccessKeys
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - route53:CreateReusableDelegationSet
                - route53:DeleteReusableDelegationSet
                - route53:GetReusableDelegationSet
                - route53:GetReusableDelegationSetLimit
                - route53:ListReusableDelegationSets
              Resource: '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ReusableDelegationSetFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: !Ref FunctionName
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: '600'
      Role: !GetAtt ReusableDelegationSetExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import random
          import string
          import socket
          import cfnresponse
          import logging
          from botocore.exceptions import ClientError

          route53client = boto3.client('route53')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def ns_list(ReusableDeligationSetID):
            response = route53client.get_reusable_delegation_set(Id=ReusableDeligationSetID)
            DelegationSet = response['DelegationSet']
            return(DelegationSet['NameServers'])

          def res_host(hostname, ip_version = 4):
            try:
              if ip_version == 6:
                ip = socket.getaddrinfo(hostname, None, socket.AF_INET6)[0][4][0]
              else:
                ip = socket.gethostbyname(hostname)
              return(ip)
            except:
              return('Problem resolving ip')

          def lambda_handler(event, context):
            logger.info('Event: ' + str(event))
            resData = {}
            PhysicalResourceId = ''
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              try:
                if event['RequestType'] == 'Create':
                  letters = string.ascii_lowercase
                  randomstr = ''.join(random.choice(letters) for i in range(8))
                  response = route53client.create_reusable_delegation_set(CallerReference = randomstr)
                  DictDelegationSet = response['DelegationSet']
                  PhysicalResourceId = DictDelegationSet['Id']
                  res = True
                  resData['Reason'] = "ReusableDelegationSet created"
                else:
                  res = True
                  resData['Reason'] = "ReusableDelegationSet no update needed"
                  PhysicalResourceId = event['PhysicalResourceId']

                resData['awsdns01']  = ns_list(PhysicalResourceId)[0]
                resData['awsdns02']  = ns_list(PhysicalResourceId)[1]
                resData['awsdns03']  = ns_list(PhysicalResourceId)[2]
                resData['awsdns04']  = ns_list(PhysicalResourceId)[3]

                resData['ipv4awsdns01']  = res_host(resData['awsdns01'] , ip_version = 4)
                resData['ipv6awsdns01']  = res_host(resData['awsdns01'] , ip_version = 6)
                resData['ipv4awsdns02']  = res_host(resData['awsdns02'] , ip_version = 4)
                resData['ipv6awsdns02']  = res_host(resData['awsdns02'] , ip_version = 6)
                resData['ipv4awsdns03']  = res_host(resData['awsdns03'] , ip_version = 4)
                resData['ipv6awsdns03']  = res_host(resData['awsdns03'] , ip_version = 6)
                resData['ipv4awsdns04']  = res_host(resData['awsdns04'] , ip_version = 4)
                resData['ipv6awsdns04']  = res_host(resData['awsdns04'] , ip_version = 6)

              except Exception as e:
                PhysicalResourceId = 'Not created'
                res = False
                resData['Reason'] = "Error: " + str(e)

            elif event['RequestType'] == 'Delete':
                PhysicalResourceId = event['PhysicalResourceId']
                limits = route53client.get_reusable_delegation_set_limit(Type='MAX_ZONES_BY_REUSABLE_DELEGATION_SET', DelegationSetId=PhysicalResourceId)
                if limits['Count'] == 0:
                  try:
                    res = True
                    resData['Reason'] = "ReusableDelegationSet deleted"
                  except Exception as e:
                    res = False
                    resData['Reason'] = "Error: " + str(e)
                else:
                  res = False
                  resData['Reason'] = "Error: DelegationSet is in use" 
            else:
              PhysicalResourceId = event['PhysicalResourceId']
              res = False   
              resData['Reason'] = "Unknown operation: " + event['RequestType']

            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, resData, PhysicalResourceId)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, resData, PhysicalResourceId)

Outputs:
  Id:
    Description: DNS Nameserver Set
    Value: !Ref ReusableDelegationSet
    Export:
      Name: !Sub '${AWS::StackName}-ID'

  awsdns01:
    Description: DNS Nameserver AWS NS1
    Value: !GetAtt ReusableDelegationSet.awsdns01
    Export:
      Name: !Sub '${AWS::StackName}-awsdns01'

  ipv4awsdns01:
    Description: IPv4 Nameserver AWS NS1
    Value: !GetAtt ReusableDelegationSet.ipv4awsdns01
    Export:
      Name: !Sub '${AWS::StackName}-ipv4awsdns01'

  ipv6awsdns01:
    Description: IPv6 Nameserver AWS NS1
    Value: !GetAtt ReusableDelegationSet.ipv6awsdns01
    Export:
      Name: !Sub '${AWS::StackName}-ipv6awsdns01'

  awsdns02:
    Description: DNS Nameserver AWS NS2
    Value: !GetAtt ReusableDelegationSet.awsdns02
    Export:
      Name: !Sub '${AWS::StackName}-awsdns02'

  ipv4awsdns02:
    Description: IPv4 Nameserver AWS NS2
    Value: !GetAtt ReusableDelegationSet.ipv4awsdns02
    Export:
      Name: !Sub '${AWS::StackName}-ipv4awsdns02'

  ipv6awsdns02:
    Description: IPv6 Nameserver AWS NS2
    Value: !GetAtt ReusableDelegationSet.ipv6awsdns02
    Export:
      Name: !Sub '${AWS::StackName}-ipv6awsdns02'

  awsdns03:
    Description: DNS Nameserver AWS NS3
    Value: !GetAtt ReusableDelegationSet.awsdns03
    Export:
      Name: !Sub '${AWS::StackName}-awsdns03'

  ipv4awsdns03:
    Description: IPv4 Nameserver AWS NS3
    Value: !GetAtt ReusableDelegationSet.ipv4awsdns03
    Export:
      Name: !Sub '${AWS::StackName}-ipv4awsdns03'

  ipv6awsdns03:
    Description: IPv6 Nameserver AWS NS3
    Value: !GetAtt ReusableDelegationSet.ipv6awsdns03
    Export:
      Name: !Sub '${AWS::StackName}-ipv6awsdns03'

  awsdns04:
    Description: DNS Nameserver AWS NS4
    Value: !GetAtt ReusableDelegationSet.awsdns04
    Export:
      Name: !Sub '${AWS::StackName}-awsdns04'

  ipv4awsdns04:
    Description: IPv4 Nameserver AWS NS4
    Value: !GetAtt ReusableDelegationSet.ipv4awsdns04
    Export:
      Name: !Sub '${AWS::StackName}-ipv4awsdns04'

  ipv6awsdns04:
    Description: IPv6 Nameserver AWS NS4
    Value: !GetAtt ReusableDelegationSet.ipv6awsdns04
    Export:
      Name: !Sub '${AWS::StackName}-ipv6awsdns04'